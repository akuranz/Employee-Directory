{"version":3,"sources":["components/Header.js","utils/API.js","components/DirectoryRow.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["HeaderWrapper","styled","header","Header","className","axios","get","DirectoryRow","profile","src","thumbnail","alt","lastName","firstName","email","phone","moment","dob","format","Button","button","Directory","useState","headers","name","val","search","order","results","filtered","col","state","setState","useEffect","a","API","response","mappedRes","data","map","res","picture","last","first","date","callAPI","type","onChange","e","target","value","filter","emp","Object","values","toString","toLowerCase","includes","placeholder","i","key","onClick","sort","b","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b03b5e68.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderWrapper = styled.header`\r\n  color: white;\r\n  background-color: teal;\r\n  margin-bottom: 25px;\r\n  padding-bottom: 25px;\r\n  padding-top: 25px;\r\n  border-bottom: 3px solid black;\r\n`;\r\n\r\nconst Header = () => {\r\n  return (\r\n    <HeaderWrapper>\r\n      <div className=\"row justify-content-center\">\r\n        <h1>Employee Directory</h1>\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        <p>\r\n          Click on buttons to sort or use the search box to narrow your results.\r\n        </p>\r\n      </div>\r\n    </HeaderWrapper>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmpProfiles: () =>\r\n    axios.get(\"https://randomuser.me/api/?results=20&nat=us\")\r\n};\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst DirectoryRow = ({ profile }) => {\r\n  return (\r\n    <div className=\"row my-2\">\r\n      <div className=\"col\">\r\n        <img src={profile.thumbnail} alt={profile.lastName + \"-thumbnail\"} />\r\n      </div>\r\n      <div className=\"col\">{profile.firstName + \" \" + profile.lastName}</div>\r\n      <div className=\"col\">{profile.email}</div>\r\n      <div className=\"col\">{profile.phone}</div>\r\n      <div className=\"col\">{moment(profile.dob).format(\"M/D/YYYY\")}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DirectoryRow;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport DirectoryRow from \"../components/DirectoryRow\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  color: white;\r\n  background-color: teal;\r\n  border: 1px solid #e4e4e4;\r\n  border-radius: 50px;\r\n  padding: 5px 25px 7px 25px;\r\n  margin-bottom: 25px;\r\n`;\r\n\r\nconst Directory = () => {\r\n  const [state, setState] = useState({\r\n    headers: [\r\n      {\r\n        name: \"Image\",\r\n        val: \"image\"\r\n      },\r\n      {\r\n        name: \"Name\",\r\n        val: \"firstName\"\r\n      },\r\n      {\r\n        name: \"Email\",\r\n        val: \"email\"\r\n      },\r\n      {\r\n        name: \"Phone\",\r\n        val: \"phone\"\r\n      },\r\n      {\r\n        name: \"DoB\",\r\n        val: \"dob\"\r\n      }\r\n    ],\r\n    search: \"\",\r\n    order: \"DESC\",\r\n    results: [],\r\n    filtered: [],\r\n    col: \"\"\r\n  });\r\n\r\n  const handleChange = e => {\r\n    setState({\r\n      ...state,\r\n      search: e.target.value,\r\n      filtered: state.results.filter(emp => {\r\n        var vals = Object.values(emp) // [Object object]\r\n          .toString()\r\n          .toLowerCase();\r\n\r\n        return vals.includes(e.target.value.toLowerCase());\r\n      })\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const callAPI = async () => {\r\n      let response = await API.getEmpProfiles();\r\n      const mappedRes = response.data.results.map(res => ({\r\n        thumbnail: res.picture.thumbnail,\r\n        lastName: res.name.last,\r\n        firstName: res.name.first,\r\n        email: res.email,\r\n        phone: res.phone,\r\n        dob: res.dob.date\r\n      }));\r\n      setState(state => ({\r\n        ...state,\r\n        results: mappedRes,\r\n        filtered: mappedRes\r\n      }));\r\n    };\r\n    callAPI();\r\n  }, []);\r\n\r\n  const handleSort = col => {\r\n    setState({\r\n      ...state,\r\n      filtered: state.filtered.sort((a, b) => {\r\n        if (state.order === \"DESC\") {\r\n          return a[col] > b[col] ? 1 : -1;\r\n        } else {\r\n          return a[col] < b[col] ? 1 : -1;\r\n        }\r\n      }),\r\n      order: state.order === \"DESC\" ? \"ASC\" : \"DESC\"\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"row my-5 justify-content-center\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"search\"\r\n            onChange={handleChange}\r\n            value={state.search}\r\n            placeholder=\"Search\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col\"></div>\r\n          {state.headers.map((header, i) => (\r\n            <div className=\"col\" key={i + \"-header\"}>\r\n              <Button onClick={() => handleSort(header.val)}>\r\n                {header.name}\r\n              </Button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"row d-flex justify-content-center\">\r\n          <div className=\"col\">\r\n            {state.filtered.map((profile, i) => (\r\n              <DirectoryRow key={i + \"-employee\"} profile={profile} />\r\n            ))}\r\n          </div>\r\n          <hr />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Directory;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Directory from \"./pages/Directory\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\" component={Directory} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}